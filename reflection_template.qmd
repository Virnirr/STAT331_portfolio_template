---
title: "STAT 331 Portfolio"
author: "Zhixiang He"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_A- or B+\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r}
#| label: wd-1-csv

# Lab 2 Question  1

surveys <- read_csv(here::here("data", "surveys.csv"))
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

# Check-in 2.3 question 5

agesxl <- read_xlsx(path = here::here("check-ins", "2.1-loading-data", "Ages_Data", "ages.xlsx"), 
                    sheet = "ages")

```

-   `txt`

```{r}
#| label: wd-1-txt

# Checkins 2.3 question 4

ages_mystery <- read_delim(file = here::here("Week2", "Check-ins", "Ages_Data", "ages_mystery.txt"), delim="|")

```

**WD-2: I can select necessary columns from a dataset.**

```{r}
#| label: wd-2

# Lab 3 question 4

teacher_evals_clean <- teacher_evals |> 
  rename(sex = gender) |>
  filter(no_participants > 10) |> 
  mutate(
    across(.cols = c(teacher_id:class_duration), as.numeric)
  ) |> 
  select(course_id:SET_score_avg, percent_failed, academic_degree, seniority, sex)
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r}
#| label: wd-3-numeric

# Lab 3 question 9

teacher_evals_clean |> 
  count(course_id, teacher_id) |>
  filter(n == 9) |>
  nrow()

```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

# lab 4 question 2

ca_childcare <- childcare_costs |>
  inner_join(counties, join_by(county_fips_code)) |>
  filter(str_detect(state_name, patter = "California"))
```

-   factor

```{r}
#| label: wd-3-factor


# Lab 4 question 6
ca_childcare |> 
  # data cleaning
  pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "study_group",
               values_to = "median_amount") |>
  select(study_year, study_group, median_amount, region) |>
  mutate(study_group = str_to_title(str_replace(study_group, 
                                                pattern = "mc_", 
                                                replace = "")),
         study_group = fct_relevel(study_group, 
                                   "Infant", 
                                   "Toddler", 
                                   "Preschool")) |>
  filter(
    study_group %in% c("Infant", "Toddler", "Preschool")
  ) |>
  # plot
  ggplot(mapping = aes(x = study_year,
                       y = median_amount,
                       color = fct_reorder2(region, 
                                            study_year, 
                                            median_amount))) + 
  geom_point() +
  facet_wrap(~study_group) +
  geom_smooth(method = "loess") +
  labs(
    x = "Study Year",
    y = "",
    subtitle = "Weekly Median Price for Center-Based Childcare ($)",
    color = "California Region"
  ) +
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  theme_bw() +
  theme(
    aspect.ratio = 1.0,
    axis.text = element_text(size = 6)
  )
```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

# Lab 2 question 1

surveys = surveys |>
  mutate(
    date = make_date(year = year,
                     month = month,
                     day = day)
  )

```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric (using `as.numeric()` is not sufficient)

```{r}
#| label: wd-4-numeric

# Lab 3 question 6

teacher_evals_clean |>
  summarise(
    n_unique_teachers = n_distinct(teacher_id),
    n_unique_courses = n_distinct(course_id)
  )
```

-   character -- specifically a string (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

# Lab 4 question 6

ca_childcare |> 
  # data cleaning
  pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "study_group",
               values_to = "median_amount") |>
  select(study_year, study_group, median_amount, region) |>
  # string to replace and string to title
  mutate(study_group = str_to_title(str_replace(study_group, 
                                                pattern = "mc_", 
                                                replace = "")),
         study_group = fct_relevel(study_group, 
                                   "Infant", 
                                   "Toddler", 
                                   "Preschool")) |>
  filter(
    study_group %in% c("Infant", "Toddler", "Preschool")
  ) |>
  # plot
  ggplot(mapping = aes(x = study_year,
                       y = median_amount,
                       color = fct_reorder2(region, 
                                            study_year, 
                                            median_amount))) + 
  geom_point() +
  facet_wrap(~study_group) +
  geom_smooth(method = "loess") +
  labs(
    x = "Study Year",
    y = "",
    subtitle = "Weekly Median Price for Center-Based Childcare ($)",
    color = "California Region"
  ) +
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  theme_bw() +
  theme(
    aspect.ratio = 1.0,
    axis.text = element_text(size = 6)
  )

```

-   factor (example must use functions from **forcats**)

```{r}
#| label: wd-4-factor

# Lab 4 question 6

ca_childcare |> 
  # data cleaning
  pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "study_group",
               values_to = "median_amount") |>
  select(study_year, study_group, median_amount, region) |>
  mutate(study_group = str_to_title(str_replace(study_group, 
                                                pattern = "mc_", 
                                                replace = "")),
         study_group = fct_relevel(study_group, 
                                   "Infant", 
                                   "Toddler", 
                                   "Preschool")) |>
  filter(
    study_group %in% c("Infant", "Toddler", "Preschool")
  ) |>
  # plot
  ggplot(mapping = aes(x = study_year,
                       y = median_amount,
                       color = fct_reorder2(region, 
                                            study_year, 
                                            median_amount))) + 
  geom_point() +
  facet_wrap(~study_group) +
  geom_smooth(method = "loess") +
  labs(
    x = "Study Year",
    y = "",
    subtitle = "Weekly Median Price for Center-Based Childcare ($)",
    color = "California Region"
  ) +
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  theme_bw() +
  theme(
    aspect.ratio = 1.0,
    axis.text = element_text(size = 6)
  )
```

-   date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date

# Lab 2 question 1

surveys_between_date <- function(df, date1, date2) {
  df |>
    filter(
      date %within% interval(start = ymd(date1),
                             end = ymd(date2))
    )
}

surveys_after_2000 <- surveys_between_date(surveys, "2000-01-01", "2002-01-01")

```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r}
#| label: wd-5-left

# Lab 4 question 1, data explorations
# Join 2015 to 2020 to compare changes over time

data_2015 <- childcare_costs |> filter(study_year == 2015)
data_2020 <- childcare_data |> filter(study_year == 2020)

time_comparison <- data_2015 |>
  select(county_fips_code, me_2018_2015 = me_2018) |>
  left_join(
    data_2020 %>% select(county_fips_code, me_2018_2020 = me_2018),
    by = "county_fips_code"
  ) |>
  mutate(pct_change = (me_2018_2020 - me_2018_2015)/me_2018_2015 * 100)

```

-   `right_join()`

```{r}
#| label: wd-5-right

# Lab 4 question 1

# all_counties is a complete list with state, county_name, county_fips_code 
# used for data explorations
coverage_analysis <- counties %>%
  right_join(childcare_data, by = "county_fips_code")

```

-   `inner_join()`

```{r}
#| label: wd-5-inner

# Lab 4 question 2
ca_childcare <- childcare_costs |>
  inner_join(counties, join_by(county_fips_code)) |>
  filter(str_detect(state_name, patter = "California"))

```

-   `full_join()`

```{r}
#| label: wd-5-full

```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi

# Lab 4 question 1, data exploration

non_california_counties = counties |>
  filter(
    !str_detect(state_name, "California")
  )
non_california_childcare_costs <- semi_join(childcare_costs, non_california_counties)

length(semi_join)
```

-   `anti_join()`

```{r}
#| label: wd-6-anti


# Lab 4 question 1 Data Exploration

# High cost counties: MC infant cost > 20% of weekly median earnings
high_cost <- childcare_data |>
  filter(mc_infant / (me_2018 / 52) > 0.2) |> # 20% threshold
  select(county_fips_code)

# anti_join to find high-cost counties NOT in the robust subsidy set
no_subsidy_high_cost <- high_cost |>
  anti_join(counties, by = "county_fips_code")
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

# Lab 4 question 6

ca_childcare |> 
  # data cleaning
  pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "study_group",
               values_to = "median_amount") |>
  select(study_year, study_group, median_amount, region) |>
  mutate(study_group = str_to_title(str_remove(study_group, "mc_")),
         study_group = fct_relevel(study_group, "Infant", "Toddler", "Preschool")) |>
  # plot
  ggplot(mapping = aes(x = study_year,
                       y = median_amount,
                       color = fct_reorder2(region, study_year, median_amount))) + 
  geom_point() +
  facet_wrap(~study_group) +
  geom_smooth(method = "loess") +
  labs(
    x = "Study Year",
    y = "",
    subtitle = "Weekly Median Price for Center-Based Childcare ($)",
    color = "California Region"
  ) +
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  theme_bw() +
  theme(
    aspect.ratio = 1.0,
    axis.text = element_text(size = 6)
  )
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

# lab 4 question 4

ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(study_year, region) |>
  summarize(median = median(mhi_2018)) |>
  pivot_wider(id_cols = region,
              names_from = study_year,
              values_from = median)
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

I removed messages and warning from all of my labs and challenges. I am most proud of lab 7 because I spent a fair amount of time to make sure that it's unique and professional looking, especially the graphs

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

# Lab 2 question 4
ggplot(data = surveys, aes(x = weight, 
                           y = hindfoot_length)) +
  geom_point(alpha = 0.5) +
  facet_wrap(~species) +
  labs(
    title = "relationship between weight and hindfoot_length of different species",
    subtitle = "y-axis representing hindfoot_length (mm)",
    x = "weight (g)",  # x-axis label
    y = ""
  )

```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2


# Lab 3 question 11
teacher_evals_clean |>
  filter(seniority == 1) |>
  group_by(teacher_id) |>
  summarize(average_student_failing = mean(percent_failed)) |>
  filter(average_student_failing >= max(average_student_failing) | 
           average_student_failing <= min(average_student_failing)) |>
  select(teacher_id, 
         average_student_failing)

```

-   Example of function formatting

```{r}
#| label: r-2-3

# Lab 7 question 4
rescale_01 <- function(vec) {
  stopifnot(is.numeric(vec), length(vec) > 1)
  
  range <- range(vec, na.rm = TRUE)
  (vec - range[1]) / (range[2] - range[1])
}

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example -- any context

```{r}
#| label: r-3-example


# Lab 3 quetsion 5
teacher_evals_clean |>
  rename(sex = gender) |>
  filter(no_participants > 10) |>
  mutate(
    across(.cols = c(teacher_id:class_duration), .fns = as.numeric)
  ) |>
  slice(1, .by = c(course_id, SET_score_avg, percent_failed, academic_degree, seniority, sex))

```

-   Example of function stops

```{r}
#| label: r-3-function-stops

# Lab 7 question 4
rescale_01 <- function(vec) {
  stopifnot(is.numeric(vec), length(vec) > 1)
  
  range <- range(vec, na.rm = TRUE)
  (vec - range[1]) / (range[2] - range[1])
}

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   at least two numeric variables

```{r}
#| label: dvs-1-num

# Lab 2 question 4

ggplot(data = surveys, 
       aes(x = weight, 
           y = hindfoot_length)) +
  geom_point(alpha = 0.5) +
  facet_wrap(~species) +
  labs(
    title = "relationship between weight and hindfoot_length of different species",
    subtitle = "y-axis representing hindfoot_length (mm)",
    x = "weight (g)",  # x-axis label
    y = ""
  )

```

-   at least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

# Lab 2 question 8
ggplot(data = surveys, aes(x = weight, y = species)) +
  geom_boxplot(outliers = FALSE) +
  geom_jitter(color = "steelblue", alpha = 0.25, height = 0.1) +  # Adding jitter height to avoid overlapping points
  labs(
    x = "Weight (g)",
    y = "",
    title = "Species By Weight(g)"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

-   at least two categorical variables

```{r}
#| label: dvs-2-cat


# Lab 7 question 2
# Create a data frame specifically for annotations
annotation_data <- tibble(
  trip = "2",  # Specify the trip for the facet
  x = c(6, 6), # x-coordinates for the labels
  y = c(150, 25), # y-coordinates for the labels
  label = c("Johnsrud", "ScottyBrown") # Text for the labels
)


fish |>
  # Data wrangling to get frequency of missing values by year for the weight variable
  filter(
    if_any(
      .cols = weight,
      .fns = ~ is.na(.)
    )
  ) |>
  mutate(
    across(
      .cols = c("year", "section", "trip"),
      .fns = ~ as.character(.)
    )
  ) |>
  # ggplot to plot a bar chart with smooth of the frequency over the years
  ggplot(
    mapping = aes(x = year)
  ) +
  geom_bar(aes(fill = section), 
           show.legend = TRUE) +
  facet_wrap(~ str_c("Trip ", trip)) + # Adjust the facet label slightly for readability
  labs(
    title = "Frequency of Missing Weight Values in Fish Data by Section, Trip, and Year",
    subtitle = "Each bar represents counts of observations missing the of weights",
    x = "Year",
    y = ""
  ) +
  # Use RColorBrewer color palette
  scale_fill_brewer(palette = "Set2") +
  # Add annotation only to Trip 2 facet
  geom_text(
    data = annotation_data, # Use the annotation data
    aes(x = x, y = y, label = label),
    inherit.aes = FALSE,
    size = 4
  ) +
  theme_minimal(base_size = 10) +
  theme(
    axis.text.x = element_text(hjust = 1),
    panel.spacing = unit(1, "lines"),
    plot.title = element_text(face = "bold", hjust = 0.5),
    legend.position = "none"
  )

```

-   dates (timeseries plot)

```{r}
#| label: dvs-2-date

# Lab 4 Question 6:

ca_childcare |> 
  # data cleaning
  pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "study_group",
               values_to = "median_amount") |>
  select(study_year, study_group, median_amount, region) |>
  mutate(study_group = str_to_title(str_remove(study_group, "mc_")),
         study_group = fct_relevel(study_group, "Infant", "Toddler", "Preschool")) |>
  # plot
  ggplot(mapping = aes(x = study_year,
                       y = median_amount,
                       color = fct_reorder2(region, study_year, median_amount))) + 
  geom_point() +
  facet_wrap(~study_group) +
  geom_smooth(method = "loess") +
  labs(
    x = "Study Year",
    y = "",
    subtitle = "Weekly Median Price for Center-Based Childcare ($)",
    color = "California Region"
  ) +
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  theme_bw() +
  theme(
    aspect.ratio = 1.0,
    axis.text = element_text(size = 6)
  )
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can ensure people don't tilt their head

```{r}
#| label: dvs-2-1

# Lab 2 Question 8
ggplot(data = surveys, aes(x = weight, y = species)) +
  geom_boxplot(outliers = FALSE) +
  geom_jitter(color = "steelblue", alpha = 0.25, height = 0.1) +  # Adding jitter height to avoid overlapping points
  labs(
    x = "Weight (g)",
    y = "",
    title = "Species By Weight(g)"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-2


# Lab 2 question 4
ggplot(data = surveys, aes(x = weight, y = hindfoot_length)) +
  geom_point(alpha = 0.5) +
  facet_wrap(~species) +
  labs(
    title = "relationship between weight and hindfoot_length of different species",
    subtitle = "y-axis representing hindfoot_length (mm)",
    x = "weight (g)",  # x-axis label
    y = ""
  )

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-3

# Lab 4 Question 6

ca_childcare |> 
  # data cleaning
  pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "study_group",
               values_to = "median_amount") |>
  select(study_year, study_group, median_amount, region) |>
  mutate(study_group = str_to_title(str_remove(study_group, "mc_")),
         study_group = fct_relevel(study_group, "Infant", "Toddler", "Preschool")) |>
  # plot
  ggplot(mapping = aes(x = study_year,
                       y = median_amount,
                       color = fct_reorder2(region, study_year, median_amount))) + 
  geom_point() +
  facet_wrap(~study_group) +
  geom_smooth(method = "loess") +
  labs(
    x = "Study Year",
    y = "",
    subtitle = "Weekly Median Price for Center-Based Childcare ($)",
    color = "California Region"
  ) +
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  theme_bw() +
  theme(
    aspect.ratio = 1.0,
    axis.text = element_text(size = 6)
  )
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors

```{r}
#| label: dvs-3-1

# Lab 7 Question 2

# Create a data frame specifically for annotations
annotation_data <- tibble(
  trip = "2",  # Specify the trip for the facet
  x = c(6, 6), # x-coordinates for the labels
  y = c(150, 25), # y-coordinates for the labels
  label = c("Johnsrud", "ScottyBrown") # Text for the labels
)


fish |>
  # Data wrangling to get frequency of missing values by year for the weight variable
  filter(
    if_any(
      .cols = weight,
      .fns = ~ is.na(.)
    )
  ) |>
  mutate(
    across(
      .cols = c("year", "section", "trip"),
      .fns = ~ as.character(.)
    )
  ) |>
  # ggplot to plot a bar chart with smooth of the frequency over the years
  ggplot(
    mapping = aes(x = year)
  ) +
  geom_bar(aes(fill = section), 
           show.legend = TRUE) +
  facet_wrap(~ str_c("Trip ", trip)) + # Adjust the facet label slightly for readability
  labs(
    title = "Frequency of Missing Weight Values in Fish Data by Section, Trip, and Year",
    subtitle = "Each bar represents counts of observations missing the of weights",
    x = "Year",
    y = ""
  ) +
  # Use RColorBrewer color palette
  scale_fill_brewer(palette = "Set2") +
  # Add annotation only to Trip 2 facet
  geom_text(
    data = annotation_data, # Use the annotation data
    aes(x = x, y = y, label = label),
    inherit.aes = FALSE,
    size = 4
  ) +
  theme_minimal(base_size = 10) +
  theme(
    axis.text.x = element_text(hjust = 1),
    panel.spacing = unit(1, "lines"),
    plot.title = element_text(face = "bold", hjust = 0.5),
    legend.position = "none"
  )
```

-   I can use annotations

```{r}
#| label: dvs-3-2

# Lab 7 Question 2
# Create a data frame specifically for annotations
annotation_data <- tibble(
  trip = "2",  # Specify the trip for the facet
  x = c(6, 6), # x-coordinates for the labels
  y = c(150, 25), # y-coordinates for the labels
  label = c("Johnsrud", "ScottyBrown") # Text for the labels
)


fish |>
  # Data wrangling to get frequency of missing values by year for the weight variable
  filter(
    if_any(
      .cols = weight,
      .fns = ~ is.na(.)
    )
  ) |>
  mutate(
    across(
      .cols = c("year", "section", "trip"),
      .fns = ~ as.character(.)
    )
  ) |>
  # ggplot to plot a bar chart with smooth of the frequency over the years
  ggplot(
    mapping = aes(x = year)
  ) +
  geom_bar(aes(fill = section), 
           show.legend = TRUE) +
  facet_wrap(~ str_c("Trip ", trip)) + # Adjust the facet label slightly for readability
  labs(
    title = "Frequency of Missing Weight Values in Fish Data by Section, Trip, and Year",
    subtitle = "Each bar represents counts of observations missing the of weights",
    x = "Year",
    y = ""
  ) +
  # Use RColorBrewer color palette
  scale_fill_brewer(palette = "Set2") +
  # Add annotation only to Trip 2 facet
  geom_text(
    data = annotation_data, # Use the annotation data
    aes(x = x, y = y, label = label),
    inherit.aes = FALSE,
    size = 4
  ) +
  theme_minimal(base_size = 10) +
  theme(
    axis.text.x = element_text(hjust = 1),
    panel.spacing = unit(1, "lines"),
    plot.title = element_text(face = "bold", hjust = 0.5),
    legend.position = "none"
  )
```

-   I can be creative...

```{r}
#| label: dvs-3-3

# Lab 7 Question 2

# Create a data frame specifically for annotations
annotation_data <- tibble(
  trip = "2",  # Specify the trip for the facet
  x = c(6, 6), # x-coordinates for the labels
  y = c(150, 25), # y-coordinates for the labels
  label = c("Johnsrud", "ScottyBrown") # Text for the labels
)


fish |>
  # Data wrangling to get frequency of missing values by year for the weight variable
  filter(
    if_any(
      .cols = weight,
      .fns = ~ is.na(.)
    )
  ) |>
  mutate(
    across(
      .cols = c("year", "section", "trip"),
      .fns = ~ as.character(.)
    )
  ) |>
  # ggplot to plot a bar chart with smooth of the frequency over the years
  ggplot(
    mapping = aes(x = year)
  ) +
  geom_bar(aes(fill = section), 
           show.legend = TRUE) +
  facet_wrap(~ str_c("Trip ", trip)) + # Adjust the facet label slightly for readability
  labs(
    title = "Frequency of Missing Weight Values in Fish Data by Section, Trip, and Year",
    subtitle = "Each bar represents counts of observations missing the of weights",
    x = "Year",
    y = ""
  ) +
  # Use RColorBrewer color palette
  scale_fill_brewer(palette = "Set2") +
  # Add annotation only to Trip 2 facet
  geom_text(
    data = annotation_data, # Use the annotation data
    aes(x = x, y = y, label = label),
    inherit.aes = FALSE,
    size = 4
  ) +
  theme_minimal(base_size = 10) +
  theme(
    axis.text.x = element_text(hjust = 1),
    panel.spacing = unit(1, "lines"),
    plot.title = element_text(face = "bold", hjust = 0.5),
    legend.position = "none"
  )
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

# Lab 3 Question 12

teacher_evals_clean |> 
  filter(sex == "female", academic_degree %in% c("dr", "prof")) |>
  group_by(teacher_id) |>
  summarize(average_student_responding = mean(resp_share)) |>
  filter(average_student_responding >= max(average_student_responding) | 
           average_student_responding <= min(average_student_responding))
```

-   Example using `across()`

```{r}
#| label: dvs-4-across

# Lab 7 question 1
fish |>
  summarise(
    across(.cols = trip:species,
           .fns = ~ sum(is.na(.)))
  )
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

# Lab 7 question 1
fish |>
  summarise(
    across(.cols = trip:species,
           .fns = ~ sum(is.na(.)))
  )
```

-   Example 2

```{r}
#| label: dvs-5-2


# Lab 3 question 6
teacher_evals_clean |>
  summarise(
    n_unique_teachers = n_distinct(teacher_id),
    n_unique_courses = n_distinct(course_id)
  )

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r}
#| label: dvs-6-1

# Lab 4 question 4
ca_childcare |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(study_year, region) |>
  summarize(median = median(mhi_2018)) |>
  pivot_wider(id_cols = region,
              names_from = study_year,
              values_from = median,
              names_prefix = "Median household income In ")
```

-   Example 2

```{r}
#| label: dvs-6-2

# Lab 8 question 3
# knitr::kable and kableExtra: https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html


evals |>
  distinct(teacher_id, .keep_all = TRUE) |>
  mutate(
    across(
      .cols = c("sex", "seniority"),
      .fns = as.character
    )
  ) |>
  select(c("sex", "seniority", "academic_degree")) |>
  pivot_longer(
    cols = c("sex", "seniority", "academic_degree"),
    values_to = "data"
  ) |>
  drop_na() |>
  mutate(
    data_factor = case_when(
      # check to see if it's numeric since characters are mixed in as well
      !is.na(as.numeric(data)) & as.numeric(data) <= 4 ~ "Junior (4 years or less)",
      !is.na(as.numeric(data)) & as.numeric(data) > 4 ~ "Senior (more than 4 years)",
      data == "no_dgr" ~ "No Degree",
      data == "ma" ~ "Masters",
      data == "dr" ~ "Doctorate",
      data == "prof" ~ "Professor",
      data == "male" ~ "Male",
      data == "female" ~ "Female"
    ),
    data_factor = factor(data_factor, levels = c(
      "Female", 
      "Male", 
      "Junior (4 years or less)", 
      "Senior (more than 4 years)", 
      "No Degree",
      "Masters",
      "Doctorate",
      "Professor"
    ))
  ) |>
  count(data_factor) |>
  pivot_wider(
    names_from = data_factor, 
    values_from = n
  ) |>
  kable() |>
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed"),
    font = 12
  )
```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r}
#| label: dvs-7-1

# Challenge 9 
all_simulations |> 
  group_by(n) |> 
  summarize(mean_of_means = mean(simulated_means)) |>
  pivot_wider(
    names_from = "n",
    values_from = "mean_of_means" 
  ) |>
    rename(
    `Mean of 10 simulation` = `10`,
    `Mean of 100 simulation` = `100`,
    `Mean of 1000 simulation` = `1000`,
    `Mean of 10000 simulation` = `10000`
  ) |>
  gt() |>
  tab_header(
    title = md("**Mean of Simulated Means by Sample Size**"),
    subtitle = md("Comparison across different sample sizes")
  ) |>
  fmt_number(
    columns = everything(),
    decimals = 4
  ) |>
  cols_align(
    align = "center",
    columns = everything()
  ) |>
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_column_labels(everything())
  ) |>
  tab_source_note(
    source_note = md("Data derived from `all_simulations` dataset.")
  )
  

```

-   Example 2

```{r}
#| label: dvs-7-2


# Challenge 9 

map_chr(.x = surveys, 
        .f = ~ class(.)) |>
  enframe(name = "variable", 
          value = "data_type") |>
  pivot_wider(names_from = "variable", 
              values_from = "data_type") |>
  kable(col.names = colnames(surveys)) |>
  kable_styling(bootstrap_options = "striped", font_size = 12)


```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

# Lab 3 Question 12
teacher_evals_clean |> 
  filter(sex == "female", 
         academic_degree %in% c("dr", "prof")) |>
  group_by(teacher_id) |>
  summarize(average_student_responding = mean(resp_share)) |>
  filter(average_student_responding >= max(average_student_responding) | 
           average_student_responding <= min(average_student_responding))
```

-   `across()`

```{r}
#| label: pe-1-across

# Lab 3 question 5
teacher_evals_clean <- teacher_evals |> 
  rename(sex = gender) |>
  filter(no_participants > 10) |> 
  mutate(
    across(.cols = c(teacher_id:class_duration), as.numeric)
  ) |> 
  select(course_id:SET_score_avg, percent_failed, academic_degree, seniority, sex)
```

-   `map()` functions

```{r}
#| label: pe-1-map-1

# Lab 8 question 4

# knitr::kable and kableExtra: https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html

# Get a list of data types
fish_na_data <- map_int(.x = fish, .f = ~ sum(is.na(.)))
as.data.frame(list(columns = names(fish_na_data), 
              total_na = fish_na_data), 
              row.names = NULL) |>
kable(
  col.names = c("columns", "total_na") # Dynamically retrieve column names
) |>
kable_styling(
  bootstrap_options = c("striped", "hover", "condensed"), # Striped styling
  full_width = F, 
  position = "left",
  font_size = 12 # Set font size
) |>
column_spec(2, width = "10em")
```

**PE-2: I can write functions to reduce repetition in my code.**

-   Function that operates on vectors

```{r}
#| label: pe-2-1

# Lab 7 question 4
rescale_01 <- function(vec) {
  stopifnot(is.numeric(vec), length(vec) > 1)
  
  range <- range(vec, na.rm = TRUE)
  (vec - range[1]) / (range[2] - range[1])
}
```

-   Function that operates on data frames

```{r}
#| label: pe-2-2

# Lab 7 question 8

rescale_column <- function(df, cols) {
  stopifnot(is.data.frame(df))

  df |>
    mutate(
      across(.cols = {{ cols }}, .fns = ~rescale_01(.x)
                         )
                  )
  
}

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r}
#| label: pe-3-across

# Lab 7 question 1
fish |>
  summarise(
    across(.cols = trip:species,
           .fns = ~ sum(is.na(.)))
  )
```

-   `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

# Lab 8 question 4

# knitr::kable and kableExtra: https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html

# Get a list of data types
fish_na_data <- map_int(.x = fish, .f = ~ sum(is.na(.)))
as.data.frame(list(columns = names(fish_na_data), 
              total_na = fish_na_data), 
              row.names = NULL) |>
kable(
  col.names = c("columns", "total_na") # Dynamically retrieve column names
) |>
kable_styling(
  bootstrap_options = c("striped", "hover", "condensed"), # Striped styling
  full_width = F, 
  position = "left",
  font_size = 12 # Set font size
) |>
column_spec(2, width = "10em")
```

-   `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

# lab 9 question 6
all_simulations <- grid |> 
  mutate(simulated_means = pmap(.l = list(n = n, df = df), 
                                .f = simulate_means)
         ) |> 
  unnest(cols = simulated_means) 
```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

# Lab 3 quetsion 7
teacher_evals_clean |> 
  filter(if_any(.cols = everything(), 
                .fns = ~ is.na(.x)))
```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

# Lab 4 question 6
ca_childcare |> 
  # data cleaning
  pivot_longer(cols = mc_infant:mc_preschool,
               names_to = "study_group",
               values_to = "median_amount") |>
  select(study_year, study_group, median_amount, region) |>
  mutate(study_group = str_to_title(str_replace(study_group, 
                                                pattern = "mc_", 
                                                replace = "")),
         study_group = fct_relevel(study_group, 
                                   "Infant", 
                                   "Toddler", 
                                   "Preschool")) |>
  filter(
    study_group %in% c("Infant", "Toddler", "Preschool")
  ) |>
  # plot
  ggplot(mapping = aes(x = study_year,
                       y = median_amount,
                       color = fct_reorder2(region, 
                                            study_year, 
                                            median_amount))) + 
  geom_point() +
  facet_wrap(~study_group) +
  geom_smooth(method = "loess") +
  labs(
    x = "Study Year",
    y = "",
    subtitle = "Weekly Median Price for Center-Based Childcare ($)",
    color = "California Region"
  ) +
  scale_x_continuous(breaks = seq(2008,
                                  2018,
                                  by = 2)) +
  theme_bw() +
  theme(
    aspect.ratio = 1.0,
    axis.text = element_text(size = 6)
  )
```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

# Lab 9 question 1
randomBabies <- function(nBabies = 4) {
  perm <- sample(1:nBabies, nBabies, replace = FALSE)
  sum(perm == 1:nBabies)
}

results <- map_int(.x = 1:10000,
                   .f = ~ randomBabies(nBabies = 4)
                   )
```

-   Example 2

```{r}
#| label: dsm-1-2

# Lab 9 question 4
simulate_means <- function(n, df){
  map_dbl(.x = 1:n, 
          .f = ~rchisq(n = 100, df = df) %>% mean()
          )
}
```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

# Lab 1 question 9

# Load the ToothGrowth dataset (should be available in base R)
data(ToothGrowth)

# Perform the two-sample t-test with unequal variances (Welch's t-test)
t_test_result <- t.test(len ~ supp, data = ToothGrowth, 
                        var.equal = FALSE, 
                        alternative = "two.sided")

# Print the result
print(t_test_result)
```

-   Example 2

```{r}
#| label: dsm-2-2


# Lab 2 Question 17
species_mod <- aov(weight ~ species, data = surveys)

summary(species_mod)

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

Throughout the course, I would always take the feedback from Dr. Theobold and my peer and try to make each and every question from growing to successful, while also providing reflections of the changes. For majority of my labs and challenges, I have turned in a revision no matter if I have already received a "complete" on that assignment.

Example:

The following code was modified from the original to be clearer and more efficient from my past labs.

```{r}
teacher_evals_clean |> 
  count(course_id, teacher_id) |>
  filter(n == 9) |>
  nrow()
```

Comment I got from my revision:

**Comments:**

This requires far fewer steps!

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

I always used what I learned from my past labs and practice activities in future assignments. For example, I would always use the pipe ("\|\>") whenever we have a one directional data flow. In addition, I would always complete the challenges to the best of my ability with everything I have learn thus far. I sometimes try to go above and beyond the class and use resources that were not taught but can be found on online documentations (but also citing them) and learning about them.

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

The following is the feedback that I gave that I'm most proud of in one of my peer review. I included an in-depth review of my peer's general code formatting. I also gave some suggestions on how to write more tidy codes like `adding more spaces between "=" and adding more return statements after ","` .

![](images/clipboard-2152803014.png)

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->

Before my discussion with Dr. Theobold, I didn’t fully understand the Developer/Coder protocol established for our team. My collaboration with my partner was largely one-sided—I often took the lead, typing out solutions and implementing my ideas without much input from them. This approach limited my partner’s opportunities to engage and grow as a developer. After our conversation, I made a conscious effort to alternate roles more consistently, ensuring we both contributed by actively listening, discussing, and sharing our ideas as Developers and Coders. This shift allowed for a more balanced and productive collaboration.
